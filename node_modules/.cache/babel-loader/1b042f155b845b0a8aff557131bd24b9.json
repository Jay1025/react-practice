{"ast":null,"code":"var _jsxFileName = \"/Users/jay/Desktop/React/my_list/src/TastList.js\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { FcCheckmark } from \"react-icons/fc\";\nimport { FcCancel } from \"react-icons/fc\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskList = props => {\n  const {\n    tasks,\n    setTasks\n  } = props; //완료 체크\n\n  const changeColor = (task, index) => {\n    // const unCheckedList = tasks.filter((list) => list.id !== task.id);\n    // setTasks(() => [\n    //   ...unCheckedList,\n    //   (tasks[index] = { ...tasks[index], done: true }),\n    // ]);\n    tasks.splice(task, 0, { ...tasks[index]\n    });\n  }; //완료 취소\n\n\n  const cancelColor = (task, index) => {\n    const unCheckedList = tasks.filter(list => list.id !== task.id);\n    setTasks(() => [...unCheckedList, tasks[index] = { ...tasks[index],\n      done: false\n    }]);\n  };\n\n  const handleOnDragEnd = result => {\n    const [reorderedList] = tasks.splice(result.source.index, 1);\n    tasks.splice(result.destination.index, 0, reorderedList);\n    setTasks(tasks);\n  }; //id순으로 리스트 정렬\n  // tasks.sort(function (a, b) {\n  //   if (a.id > b.id) {\n  //     return 1;\n  //   }\n  //   if (a.id < b.id) {\n  //     return -1;\n  //   }\n  // });\n\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: handleOnDragEnd,\n    children: /*#__PURE__*/_jsxDEV(Droppable, {\n      droppableId: \"tasks\",\n      children: provided => /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"tasks\",\n        ...provided.droppableProps,\n        ref: provided.innerRef,\n        children: [tasks && tasks.map((task, index) => {\n          return /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: task.id,\n            index: index,\n            children: provided => /*#__PURE__*/_jsxDEV(Li, {\n              done: task.done,\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              children: [/*#__PURE__*/_jsxDEV(Span, {\n                children: task.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 25\n              }, this), !task.done ? /*#__PURE__*/_jsxDEV(Click, {\n                children: /*#__PURE__*/_jsxDEV(FcCheckmark, {\n                  onClick: () => changeColor(task, index)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 27\n              }, this) : /*#__PURE__*/_jsxDEV(Click, {\n                children: /*#__PURE__*/_jsxDEV(FcCancel, {\n                  onClick: () => cancelColor(task, index)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 23\n            }, this)\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 19\n          }, this);\n        }), provided.placeholder]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_c = TaskList;\nconst Li = styled.li`\n  margin-bottom: 0.8em;\n  background: ${props => props.done ? \"pink\" : \"white\"};\n`;\n_c2 = Li;\nconst Span = styled.span`\n  margin: 0 1em 0 0;\n`;\n_c3 = Span;\nconst Click = styled.span`\n  cursor: pointer;\n`;\n_c4 = Click;\nexport default TaskList;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"TaskList\");\n$RefreshReg$(_c2, \"Li\");\n$RefreshReg$(_c3, \"Span\");\n$RefreshReg$(_c4, \"Click\");","map":{"version":3,"sources":["/Users/jay/Desktop/React/my_list/src/TastList.js"],"names":["DragDropContext","Droppable","Draggable","FcCheckmark","FcCancel","styled","TaskList","props","tasks","setTasks","changeColor","task","index","splice","cancelColor","unCheckedList","filter","list","id","done","handleOnDragEnd","result","reorderedList","source","destination","provided","droppableProps","innerRef","map","draggableProps","dragHandleProps","title","placeholder","Li","li","Span","span","Click"],"mappings":"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","sourcesContent":["import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { FcCheckmark } from \"react-icons/fc\";\nimport { FcCancel } from \"react-icons/fc\";\nimport styled from \"styled-components\";\n\nconst TaskList = (props) => {\n  const { tasks, setTasks } = props;\n  //완료 체크\n  const changeColor = (task, index) => {\n    // const unCheckedList = tasks.filter((list) => list.id !== task.id);\n    // setTasks(() => [\n    //   ...unCheckedList,\n    //   (tasks[index] = { ...tasks[index], done: true }),\n    // ]);\n    tasks.splice(task, 0, {...tasks[index]})\n  };\n  //완료 취소\n  const cancelColor = (task, index) => {\n    const unCheckedList = tasks.filter((list) => list.id !== task.id);\n    setTasks(() => [\n      ...unCheckedList,\n      (tasks[index] = { ...tasks[index], done: false }),\n    ]);\n  };\n  const handleOnDragEnd = (result) => {\n    const [reorderedList] = tasks.splice(result.source.index, 1);\n    tasks.splice(result.destination.index, 0, reorderedList);\n    setTasks(tasks);\n  };\n  //id순으로 리스트 정렬\n  // tasks.sort(function (a, b) {\n  //   if (a.id > b.id) {\n  //     return 1;\n  //   }\n  //   if (a.id < b.id) {\n  //     return -1;\n  //   }\n  // });\n\n  return (\n    <DragDropContext onDragEnd={handleOnDragEnd}>\n      <Droppable droppableId=\"tasks\">\n        {(provided) => (\n          <ul\n            className=\"tasks\"\n            {...provided.droppableProps}\n            ref={provided.innerRef}\n          >\n            {tasks &&\n              tasks.map((task, index) => {\n                return (\n                  <Draggable key={task.id} draggableId={task.id} index={index}>\n                    {(provided) => (\n                      <Li\n                        done={task.done}\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                      >\n                        <Span>{task.title}</Span>\n                        {!task.done ? (\n                          <Click>\n                            <FcCheckmark\n                              onClick={() => changeColor(task, index)}\n                            />\n                          </Click>\n                        ) : (\n                          <Click>\n                            <FcCancel\n                              onClick={() => cancelColor(task, index)}\n                            />\n                          </Click>\n                        )}\n                      </Li>\n                    )}\n                  </Draggable>\n                );\n              })}\n            {provided.placeholder}\n          </ul>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n};\n\nconst Li = styled.li`\n  margin-bottom: 0.8em;\n  background: ${(props) => (props.done ? \"pink\" : \"white\")};\n`;\nconst Span = styled.span`\n  margin: 0 1em 0 0;\n`;\nconst Click = styled.span`\n  cursor: pointer;\n`;\nexport default TaskList;\n"]},"metadata":{},"sourceType":"module"}